{"version":3,"sources":["broadcast.js"],"names":["subscribeChannel","event","channel","callback","Array","isArray","forEach","ch","unsubscribeChannel","Broadcast","subscribe_listener_events_to_broadcast","eventName","concat","args","subscriber","call","_error"],"mappings":";;;;;;;;;AAAA;;;;;;;;AASA,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,OAAjC,EAA0CC,QAA1C,EAAoD;AAClD,MAAIC,MAAMC,OAAN,CAAcH,OAAd,CAAJ,EAA4B;AAC1BA,YAAQI,OAAR,CAAgB,UAACC,EAAD,EAAQ;AACtBN,YAAMM,EAAN,IAAYJ,QAAZ;AACD,KAFD;AAGD,GAJD,MAIO;AACLF,UAAMC,OAAN,IAAiBC,QAAjB;AACD;AACF;;AAQD,SAASK,kBAAT,CAA4BP,KAA5B,EAAmCC,OAAnC,EAA4C;AAC1C,MAAIE,MAAMC,OAAN,CAAcH,OAAd,CAAJ,EAA4B;AAC1BA,YAAQI,OAAR,CAAgB,UAACC,EAAD,EAAQ;AACtB,UAAIN,MAAMM,EAAN,CAAJ,EAAe,OAAON,MAAMM,EAAN,CAAP;AAChB,KAFD;AAGD,GAJD,MAIO,IAAIN,MAAMC,OAAN,CAAJ,EAAoB,OAAOD,MAAMC,OAAN,CAAP;AAC5B;;IAEYO,S,WAAAA,S;AACX,uBAAc;AAAA;;AAAA;;AACZ,qBAAOC,sCAAP,CAA8CJ,OAA9C,CAAsD,UAACK,SAAD,EAAe;AACnE,UAAIV,QAAS,GAAD,CAAMW,MAAN,CAAaD,SAAb,CAAZ;;AAEA,YAAKV,KAAL,IAAc,EAAd;;AAQA,YAAKU,SAAL,IAAkB,UAAUT,OAAV,EAAmBC,QAAnB,EAA6B;AAC7CH,yBAAiB,KAAKC,KAAL,CAAjB,EAA8BC,OAA9B,EAAuCC,QAAvC;AACD,OAFD;AAGD,KAdD;AAeD;;;;yBASIF,K,EAAOC,O,EAASW,I,EAAM;AACzB,UAAIC,aAAc,GAAD,CAAMF,MAAN,CAAaX,KAAb,CAAjB;;AAEA,UAAI,KAAKa,UAAL,KAAoB,KAAKA,UAAL,EAAiBZ,OAAjB,CAAxB,EAAmD;AACjD,aAAKY,UAAL,EAAiBZ,OAAjB,EAA0Ba,IAA1B,CAA+B,IAA/B,EAAqCF,IAArC;AACD;AACF;;;0BAOKV,Q,EAAU;AACd,WAAKa,MAAL,GAAcb,QAAd;AACD;;;8BAOSU,I,EAAM;AACd,UAAI,KAAKG,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,EAAuBF,IAAvB;AACD;AACF;;;gCAOWX,O,EAAS;AAAA;;AACnB,uBAAOQ,sCAAP,CAA8CJ,OAA9C,CAAsD,UAACL,KAAD,EAAW;AAC/D,YAAIa,aAAc,GAAD,CAAMF,MAAN,CAAaX,KAAb,CAAjB;;AAEAO,2BAAmB,OAAKM,UAAL,CAAnB,EAAqCZ,OAArC;AACD,OAJD;AAKD","file":"broadcast.js","sourcesContent":["import config from '../config.json';\n\n/**\n * Subscribe a channel to a trigger event\n *\n * @param {string} event - (message, presence, status)\n * @param {string|[string]} channel\n * @param {function} callback to execute.\n */\nfunction subscribeChannel(event, channel, callback) {\n  if (Array.isArray(channel)) {\n    channel.forEach((ch) => {\n      event[ch] = callback;\n    });\n  } else {\n    event[channel] = callback;\n  }\n}\n\n/**\n * Unsubscribe a channel of a trigger event\n *\n * @param {string} event - (message, presence, status)\n * @param {string|[string]} channel\n */\nfunction unsubscribeChannel(event, channel) {\n  if (Array.isArray(channel)) {\n    channel.forEach((ch) => {\n      if (event[ch]) delete event[ch];\n    });\n  } else if (event[channel]) delete event[channel];\n}\n\nexport class Broadcast {\n  constructor() {\n    config.subscribe_listener_events_to_broadcast.forEach((eventName) => {\n      let event = ('_').concat(eventName);\n\n      this[event] = {};\n\n      /**\n       * Subscribe a channel with its callback to an event\n       *\n       * @param {string} channel\n       * @param {function} callback\n       */\n      this[eventName] = function (channel, callback) {\n        subscribeChannel(this[event], channel, callback);\n      };\n    });\n  }\n\n  /**\n   * Emit a message to a channel through an event\n   *\n   * @param {string} event - (message, presence, status)\n   * @param {string} channel\n   * @param {object} args\n   */\n  emit(event, channel, args) {\n    let subscriber = ('_').concat(event);\n\n    if (this[subscriber] && this[subscriber][channel]) {\n      this[subscriber][channel].call(null, args);\n    }\n  }\n\n  /**\n   * Subscribe or unsubscribe for catching errors from trigger events\n   *\n   * @param {function|null} callback\n   */\n  error(callback) {\n    this._error = callback;\n  }\n\n  /**\n   * Emit an error to the callback subscribed\n   *\n   * @param {object} args\n   */\n  emitError(args) {\n    if (this._error) {\n      this._error.call(null, args);\n    }\n  }\n\n  /**\n   * Unsubscribe a channel of all events\n   *\n   * @param {string} channel\n   */\n  unsubscribe(channel) {\n    config.subscribe_listener_events_to_broadcast.forEach((event) => {\n      let subscriber = ('_').concat(event);\n\n      unsubscribeChannel(this[subscriber], channel);\n    });\n  }\n}\n"]}