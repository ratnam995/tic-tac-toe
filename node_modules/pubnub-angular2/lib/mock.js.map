{"version":3,"sources":["mock.js"],"names":["Mock","broadcaster","listener","broadcastChannels","instance","self","subscribe_listener_events_to_broadcast","forEach","event","received","subscription","includes","emit","channel","error","emitError","affectedChannels","affectedChannelGroups","channelGroup","Object","keys","getOriginalInstance","addListener","channels","triggerEvents","Array","isArray","trigger","push","args","addEventsBroadcast","channelGroups","removeEventBroadcast"],"mappings":"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","file":"mock.js","sourcesContent":["import config from '../config.json';\n\nexport class Mock {\n\n  constructor(broadcaster) {\n    this.listener = null;\n    this.broadcaster = broadcaster;\n    this.broadcastChannels = {};\n  }\n\n  /**\n   * Initialize the listener for broadcasting all events\n   *\n   * @param {wrapper} instance\n   */\n  initializeListener(instance) {\n    if (this.listener === null) {\n      let self = this;\n\n      self.listener = {};\n\n      config.subscribe_listener_events_to_broadcast.forEach((event) => {\n        self.listener[event] = function (received) {\n          if (received.subscription && self.broadcastChannels[received.subscription] && self.broadcastChannels[received.subscription].includes(event)) {\n            self.broadcaster.emit(event, received.subscription, received);\n\n            if (received.channel) {\n              self.broadcaster.emit(event, received.channel, received);\n            }\n          }\n\n          if (received.channel && self.broadcastChannels[received.channel] && self.broadcastChannels[received.channel].includes(event)) {\n            self.broadcaster.emit(event, received.channel, received);\n          }\n\n          if (event === 'status') {\n            if (received.error) {\n              self.broadcaster.emitError(received);\n            } else if (received.affectedChannels || received.affectedChannelGroups) {\n              received.affectedChannels.forEach((channel) => {\n                if (self.broadcastChannels[channel] && self.broadcastChannels[channel].includes(event)) {\n                  self.broadcaster.emit(event, channel, received);\n                }\n              });\n\n              received.affectedChannelGroups.forEach((channelGroup) => {\n                if (self.broadcastChannels[channelGroup] && self.broadcastChannels[channelGroup].includes(event)) {\n                  self.broadcaster.emit(event, channelGroup, received);\n                }\n              });\n            } else {\n              Object.keys(self.broadcastChannels).forEach((channel) => {\n                self.broadcaster.emit(event, channel, received);\n              });\n            }\n          }\n        };\n      });\n\n      instance.getOriginalInstance().addListener(this.listener);\n    }\n  }\n\n  /**\n   * Adds a set of channels to all events to broadcast\n   *\n   * @param {[string]} channels\n   * @param {true|['message', 'presence', 'status']} triggerEvents\n   */\n  addEventsBroadcast(channels, triggerEvents) {\n    channels.forEach((channel) => {\n      if (typeof triggerEvents === 'boolean') {\n        this.broadcastChannels[channel] = config.subscribe_listener_events_to_broadcast;\n      } else if (Array.isArray(triggerEvents)) {\n        this.broadcastChannels[channel] = [];\n\n        triggerEvents.forEach((trigger) => {\n          if (config.subscribe_listener_events_to_broadcast.includes(trigger)) {\n            this.broadcastChannels[channel].push(trigger);\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Removes a set of channels from of all events to broadcast\n   *\n   * @param {[string]} channels\n   */\n  removeEventBroadcast(channels) {\n    channels.forEach((channel) => {\n      if (this.broadcastChannels[channel]) {\n        delete this.broadcastChannels[channel];\n      }\n    });\n  }\n\n  /**\n   * Enable a set of channels or group of channels to the broadcaster\n   *\n   * @param {object} args\n   */\n  enableEventsBroadcast(args) {\n    if (args.channels) {\n      this.addEventsBroadcast(args.channels, args.triggerEvents);\n    }\n\n    if (args.channelGroups) {\n      this.addEventsBroadcast(args.channelGroups, args.triggerEvents);\n    }\n  }\n\n  /**\n   * Disable a set of channels or group of channels from the broadcaster\n   *\n   * @param {object} args\n   */\n  disableEventsBroadcast(args) {\n    if (args.channels) {\n      this.removeEventBroadcast(args.channels);\n    }\n\n    if (args.channelGroups) {\n      this.removeEventBroadcast(args.channelGroups);\n    }\n  }\n}\n"]}