{"version":3,"sources":["output.js"],"names":["Output","channels","keepMessages","channel","message","push","length","splice","key","sort","a","b","clean"],"mappings":";;;;;;;;;;IAAaA,M,WAAAA,M;AACX,oBAAc;AAAA;;AACZ,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACD;;;;yBAQIC,O,EAASC,O,EAAS;AACrB,UAAI,KAAKH,QAAL,CAAcE,OAAd,CAAJ,EAA4B;AAC1B,aAAKF,QAAL,CAAcE,OAAd,EAAuBE,IAAvB,CAA4BD,OAA5B;;AAEA,YAAI,KAAKF,YAAL,CAAkBC,OAAlB,KAA8B,KAAKF,QAAL,CAAcE,OAAd,EAAuBG,MAAvB,GAAgC,KAAKJ,YAAL,CAAkBC,OAAlB,CAAlE,EAA8F;AAC5F,eAAKF,QAAL,CAAcE,OAAd,EAAuBI,MAAvB,CAA8B,CAA9B,EAAkC,KAAKN,QAAL,CAAcE,OAAd,EAAuBG,MAAvB,GAAgC,KAAKJ,YAAL,CAAkBC,OAAlB,CAAlE;AACD;AACF;AACF;;;wBAQGA,O,EAAS;AACX,UAAI,KAAKF,QAAL,CAAcE,OAAd,CAAJ,EAA4B;AAC1B,eAAO,KAAKF,QAAL,CAAcE,OAAd,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;;;0BAOKA,O,EAAS;AACb,UAAI,KAAKF,QAAL,CAAcE,OAAd,CAAJ,EAA4B;AAC1B,aAAKF,QAAL,CAAcE,OAAd,EAAuBG,MAAvB,GAAgC,CAAhC;AACD;AACF;;;8BAOSH,O,EAASD,Y,EAAc;AAC/B,UAAI,CAAC,KAAKD,QAAL,CAAcE,OAAd,CAAL,EAA6B;AAC3B,aAAKF,QAAL,CAAcE,OAAd,IAAyB,EAAzB;AACA,aAAKD,YAAL,CAAkBC,OAAlB,IAA6BD,YAA7B;AACA,eAAO,IAAP;AACD,OAJD,MAIO;AACL,eAAO,KAAP;AACD;AACF;;;yBAQIC,O,EAASK,G,EAAK;AACjB,UAAI,KAAKP,QAAL,CAAcE,OAAd,CAAJ,EAA4B;AAC1B,aAAKF,QAAL,CAAcE,OAAd,EAAuBM,IAAvB,CAA4B,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACpC,cAAID,EAAEF,GAAF,IAASG,EAAEH,GAAF,CAAb,EAAqB,OAAO,CAAP,CAArB,KACK,IAAIE,EAAEF,GAAF,IAASG,EAAEH,GAAF,CAAb,EAAqB,OAAO,CAAC,CAAR,CAArB,KACA,OAAO,CAAP;AACN,SAJD;AAKD;AACF;;;gCAOWL,O,EAAS;AACnB,UAAI,KAAKF,QAAL,CAAcE,OAAd,CAAJ,EAA4B;AAC1B,aAAKS,KAAL,CAAWT,OAAX;AACA,eAAO,KAAKF,QAAL,CAAcE,OAAd,CAAP;AACD;AACF","file":"output.js","sourcesContent":["export class Output {\n  constructor() {\n    this.channels = {};\n    this.keepMessages = {};\n  }\n\n  /**\n   * Push a message to a channel's stack or a set of channels' stack\n   *\n   * @param {string|[string]} channel\n   * @param {object} message\n   */\n  push(channel, message) {\n    if (this.channels[channel]) {\n      this.channels[channel].push(message);\n\n      if (this.keepMessages[channel] && this.channels[channel].length > this.keepMessages[channel]) {\n        this.channels[channel].splice(0, (this.channels[channel].length - this.keepMessages[channel]));\n      }\n    }\n  }\n\n  /**\n   * Get a stack of messages for a channel or a set of channels\n   *\n   * @param {string|[string]} channel\n   * @returns [object] array\n   */\n  get(channel) {\n    if (this.channels[channel]) {\n      return this.channels[channel];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Clean a stack of message for a channel or a set of channels\n   *\n   * @param {string|[string]} channel\n   */\n  clean(channel) {\n    if (this.channels[channel]) {\n      this.channels[channel].length = 0;\n    }\n  }\n\n  /**\n   * Subscribe a channel or a set of channels to create a stack of messages\n   *\n   * @param {string|[string]} channel\n   */\n  subscribe(channel, keepMessages) {\n    if (!this.channels[channel]) {\n      this.channels[channel] = [];\n      this.keepMessages[channel] = keepMessages;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Sort the stack of messages for a channel or set of channels\n   *\n   * @param {string|[string]} channel\n   * @param string key\n   */\n  sort(channel, key) {\n    if (this.channels[channel]) {\n      this.channels[channel].sort((a, b) => {\n        if (a[key] > b[key]) return 1;\n        else if (a[key] < b[key]) return -1;\n        else return 0;\n      });\n    }\n  }\n\n  /**\n   * Unsubscribe a channel or a set of channels of the stack of message\n   *\n   * @param {string|[string]} channel\n   */\n  unsubscribe(channel) {\n    if (this.channels[channel]) {\n      this.clean(channel);\n      delete this.channels[channel];\n    }\n  }\n}\n"]}