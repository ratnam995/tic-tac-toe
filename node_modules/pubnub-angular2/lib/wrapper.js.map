{"version":3,"sources":["wrapper.js"],"names":["Wrapper","label","pubnub","pubnubInstance","PubNub","broadcastOn","outputOn","mockingInstance","autoload","Error","initConfig","initializeListener","initialize","args","getOriginalInstance","subscribe","enableEventsBroadcast","enableLoad","disableLoad","unsubscribe","self","tm","setTimeout","disableEventsBroadcast","clearTimeout","channel","callback","keepMessages","getHistory","message","push","get","presence","status","error","clean","ReferenceError","attributeName","Object","defineProperty","methodName","apply","arguments"],"mappings":"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","file":"wrapper.js","sourcesContent":["import { Mock } from './mock';\nimport { Broadcast } from './broadcast';\nimport { Output } from './output';\nimport { Autoload } from './autoload';\n\nexport class Wrapper {\n  constructor(label, pubnub) {\n    this.label = label;\n    this.pubnubInstance = null;\n    this.PubNub = pubnub;\n    this.broadcastOn = new Broadcast();\n    this.outputOn = new Output();\n    this.mockingInstance = new Mock(this.broadcastOn);\n    this.autoload = new Autoload();\n\n    if (!this.PubNub) {\n      this.PubNub = PubNub;\n    }\n\n    if (typeof this.PubNub === 'undefined' || this.PubNub === null) {\n      throw new Error('PubNub is not in global scope. Ensure that pubnub.js v4 library is included before the angular adapter');\n    }\n  }\n\n  /**\n   * Initialize the wrapper\n   *\n   * @param {object} initConfig\n   */\n  init(initConfig) {\n    this.pubnubInstance = new this.PubNub(initConfig);\n    this.mockingInstance.initializeListener(this);\n    this.autoload.initialize(this);\n  }\n\n  /**\n   * Get the name of the instance\n   *\n   * @returns {*|string|null|string}\n   */\n  getLabel() {\n    return this.label;\n  }\n\n  /**\n   * Wrap the subscribe method to enable trigger events to the broadcast\n   *\n   * @param {object} args\n   */\n  subscribe(args) {\n    this.getOriginalInstance().subscribe(args);\n    this.mockingInstance.enableEventsBroadcast(args);\n    this.autoload.enableLoad(args);\n  }\n\n  /**\n   * Wrap the unsubscribe method to disable the trigger events to the broadcast\n   *\n   * @param args\n   */\n  unsubscribe(args) {\n    this.autoload.disableLoad(args);\n    this.outputOn.unsubscribe(args);\n    this.getOriginalInstance().unsubscribe(args);\n    let self = this;\n    let tm = setTimeout(() => {\n      self.mockingInstance.disableEventsBroadcast(args);\n      clearTimeout(tm);\n    }, 1000);\n  }\n\n  /**\n   * Get to receive messages from a channel or a set of channels through a callback\n   *\n   * @param {string|[string]} channel\n   * @param callback\n   */\n  getMessage(channel, ...args) {\n    let callback;\n    let keepMessages = 100;\n\n    if (args.length === 1 && typeof args[0] === 'function') {\n      callback = args[0];\n    } else if (args.length === 1 && typeof args[0] === 'number') {\n      keepMessages = args[0];\n    } else if (args.length === 2) {\n      callback = args[0];\n      keepMessages = args[1];\n    }\n\n    if (this.outputOn.subscribe(channel, keepMessages)) {\n      this.autoload.getHistory(channel, callback);\n    }\n\n    this.broadcastOn.message(channel, (message) => {\n      this.outputOn.push(channel, message);\n      if (callback) callback(message);\n    });\n\n    return this.outputOn.get(channel);\n  }\n\n  /**\n   * Get to receive presence information from a channel or a set of channels through a callback\n   *\n   * @param {string|[string]} channel\n   * @param callback\n   */\n  getPresence(channel, callback) {\n    if (this.broadcastOn) {\n      this.broadcastOn.presence(channel, callback);\n    }\n  }\n\n  /**\n   * Get to receive status information from a channel or a set of channels through a callback\n   *\n   * @param {string|[string]} channel\n   * @param callback\n   */\n  getStatus(channel, callback) {\n    if (this.broadcastOn) {\n      this.broadcastOn.status(channel, callback);\n    }\n  }\n\n  /**\n   * Get to receive error information from PubNub Service through a callback\n   *\n   * @param callback\n   */\n  getError(callback) {\n    if (this.broadcastOn) {\n      this.broadcastOn.error(callback);\n    }\n  }\n\n  /**\n   * Clean the stack of messages for a channel or a set of channels\n   *\n   * @param {string|[string]} channel\n   */\n  clean(channel) {\n    this.outputOn.clean(channel);\n  }\n\n  /**\n   * Release the stack of messages for a channel or a set of channels\n   *\n   * @param {string|[string]} channel\n   */\n  release(channel) {\n    this.broadcastOn.unsubscribe(channel);\n    this.outputOn.unsubscribe(channel);\n  }\n\n  /**\n   * Get the PubNub instance wrapped or throw an exception if this is not instanced yet\n   *\n   * @returns {PubNub|*|null}\n   */\n  getOriginalInstance() {\n    if (this.pubnubInstance) {\n      return this.pubnubInstance;\n    } else {\n      throw new ReferenceError('Pubnub default instance is not initialized yet. Invoke #init() method first.');\n    }\n  }\n\n  /**\n   * Wrap a PubNub's attribute\n   *\n   * @param {string} attributeName\n   */\n  wrapAttribute(attributeName) {\n    Object.defineProperty(this, attributeName, {\n      get: function () {\n        return this.getOriginalInstance()[attributeName];\n      }\n    });\n  }\n\n  /**\n   * Wrap a PubNub's method\n   *\n   * @param methodName\n   */\n  wrapMethod(methodName) {\n    this[methodName] = function () {\n      return this.getOriginalInstance()[methodName].apply(this, arguments);\n    };\n  }\n}\n"]}